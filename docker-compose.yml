version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: atproto-mention-tracker-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./:/var/www
    networks:
      - atproto-mention-tracker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=${APP_DEBUG:-false}
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis

  db:
    image: postgres:15-alpine
    container_name: atproto-mention-tracker-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-atproto_mention_tracker}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secret}
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks:
      - atproto-mention-tracker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: atproto-mention-tracker-redis
    restart: unless-stopped
    networks:
      - atproto-mention-tracker
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: atproto-mention-tracker-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./:/var/www
      - ./docker/nginx:/etc/nginx/conf.d/
    networks:
      - atproto-mention-tracker
    depends_on:
      - app

networks:
  atproto-mention-tracker:
    driver: bridge

volumes:
  dbdata: 